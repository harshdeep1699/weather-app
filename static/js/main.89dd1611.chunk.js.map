{"version":3,"sources":["CurrentDisplay/CurrentDisplay.jsx","spinner/Spinner.jsx","Forecast/ForecastApi.jsx","App.js","reportWebVitals.js","index.js"],"names":["currentDisplay","props","location","name","region","details","temperature","humidity","precip","visibility","spinner","className","Forecast","state","current","input","doRender","showerror","showspinner","handleChange","e","setState","target","value","handlesubmit","get","check","buffer","url","Axios","then","response","error","data","success","console","log","checkEnter","keyCode","errormsg","showspin","this","CurrentDisplay","onChange","onKeyUp","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAaeA,EAbM,SAACC,GAClB,OACI,sDACwBA,EAAMC,SAASC,KAAK,KAAKF,EAAMC,SAASE,OAC5D,8CAAiBH,EAAMI,QAAQC,eAC/B,2CAAcL,EAAMI,QAAQE,YAC5B,kDAAqBN,EAAMI,QAAQG,UACnC,6CAAgBP,EAAMI,QAAQI,kBCC3BC,G,MAND,WACV,OACI,qBAAKC,UAAU,SAAf,0BCoFOC,E,4MAhFXC,MAAM,CACFC,QAAQ,GACRC,MAAM,KACNC,UAAS,EACTC,WAAU,EACVf,SAAS,GACTgB,aAAY,G,EAEhBC,aAAa,SAACC,GAEV,EAAKC,SAAS,CAACN,MAAMK,EAAEE,OAAOC,S,EAGlCC,aAAa,WAET,IAAMC,EAAK,EAAKZ,MAAMa,MAGtB,GAFA,EAAKL,SAAS,CAACN,MAAMU,IACrB,EAAKE,OAAO,EAAKd,MAAME,MACD,OAAnB,EAAKF,MAAME,OAAmC,KAAnB,EAAKF,MAAME,MACzC,CACI,EAAKM,SAAS,CAACH,aAAY,IAC3B,IAAMU,EAAK,0FAA0F,EAAKf,MAAME,MAChHc,IAAMJ,IAAIG,GACTE,MAAK,SAACC,EAASC,IACgB,IAAxBD,EAASE,KAAKC,SAEd,EAAKb,SAAS,CAACN,MAAM,EAAKY,OAAOX,UAAS,EAAMC,WAAU,EAAKC,aAAY,IAC3EiB,QAAQC,IAAI,EAAKT,SAKjB,EAAKN,SAAS,CAACN,MAAM,EAAKY,OAAOb,QAAQiB,EAASE,KAAKnB,QACnDE,UAAS,EACTd,SAAS6B,EAASE,KAAK/B,SACvBe,WAAU,EACVC,aAAY,S,EAOhCmB,WAAW,SAACjB,GACO,KAAZA,EAAEkB,UAEL,EAAKd,eACLW,QAAQC,IAAI,EAAKvB,MAAME,S,4CAG3B,WAEI,IAAIf,EAAe,KACfuC,EAAU,KACVC,EAAS,KAOb,OANGC,KAAK5B,MAAMG,WACbhB,EAAe,cAAC0C,EAAD,CAAgBrC,QAASoC,KAAK5B,MAAMC,QAASZ,SAAUuC,KAAK5B,MAAMX,YAC/EuC,KAAK5B,MAAMI,YACdsB,EAAS,oDACNE,KAAK5B,MAAMK,cACdsB,EAAS,cAAC,EAAD,KAEL,8BACI,gCACI,uBAAOG,SAAUF,KAAKtB,aACdyB,QAASH,KAAKJ,WACd1B,UAAU,aAElB,uBACA,wBAAQkC,QAASJ,KAAKjB,aAAtB,mBACCgB,EACAxC,EACAuC,W,GA1EEO,IAAMC,WCQdC,E,4JATb,WAEE,OACA,qBAAKrC,UAAU,MAAf,SACA,cAAC,EAAD,U,GALcmC,IAAMC,WCQTE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.89dd1611.chunk.js","sourcesContent":["const currentDisplay=(props)=>{\r\n    return(\r\n        <div>\r\n            Current Weather in {props.location.name+\", \"+props.location.region}\r\n            <p>Temperature: {props.details.temperature}</p>\r\n            <p>Humidity: {props.details.humidity}</p>\r\n            <p>Chances of Rain: {props.details.precip}</p>\r\n            <p>Visibility: {props.details.visibility}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default currentDisplay","import './Spinner.css'\r\n\r\nconst spinner=()=>{\r\n    return(\r\n        <div className=\"loader\">Loading...</div>\r\n    )\r\n}\r\n\r\nexport default spinner","import React from 'react'\r\nimport Axios from 'axios'\r\nimport CurrentDisplay from '../CurrentDisplay/CurrentDisplay'\r\nimport Spinner from '../spinner/Spinner'\r\n\r\n\r\nclass Forecast extends React.Component\r\n{\r\n    state={\r\n        current:{},\r\n        input:null,\r\n        doRender:false,\r\n        showerror:false,\r\n        location:{},\r\n        showspinner:false\r\n    }\r\n    handleChange=(e)=>\r\n    {\r\n        this.setState({input:e.target.value})\r\n    }\r\n    buffer\r\n    handlesubmit=()=>\r\n    {\r\n        const get= this.state.check\r\n        this.setState({input:get})\r\n        this.buffer=this.state.input\r\n        if(this.state.input!==null && this.state.input!==\"\")\r\n        {\r\n            this.setState({showspinner:true})\r\n            const url= \"http://api.weatherstack.com/forecast?access_key=f538a1da40f4ca952aced4257b3aa4ac&query=\"+this.state.input\r\n            Axios.get(url)\r\n            .then((response,error)=>{\r\n                 if(response.data.success===false)\r\n                 {\r\n                    this.setState({input:this.buffer,doRender:false,showerror:true,showspinner:false})\r\n                    console.log(this.buffer)\r\n                 }\r\n                    \r\n                else{\r\n                    \r\n                    this.setState({input:this.buffer,current:response.data.current,\r\n                        doRender:true,\r\n                        location:response.data.location,\r\n                        showerror:false,\r\n                        showspinner:false    \r\n                    })\r\n                }\r\n                 \r\n                })\r\n        }\r\n    }\r\n    checkEnter=(e)=>{\r\n        if(e.keyCode===13)\r\n        {\r\n        this.handlesubmit()\r\n        console.log(this.state.input)\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        let currentDisplay=null\r\n        let errormsg= null\r\n        let showspin=null\r\n        if(this.state.doRender)\r\n         currentDisplay=<CurrentDisplay details={this.state.current} location={this.state.location}></CurrentDisplay>\r\n        if(this.state.showerror)\r\n        errormsg=<h3>Enter valid place</h3>\r\n        if(this.state.showspinner)\r\n        showspin=<Spinner></Spinner>\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <input onChange={this.handleChange}\r\n                            onKeyUp={this.checkEnter}\r\n                            className='location'>        \r\n                    </input>\r\n                    <br></br>\r\n                    <button onClick={this.handlesubmit}>Fetch</button>\r\n                    {showspin}\r\n                    {currentDisplay}\r\n                    {errormsg}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Forecast\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Forecast from './Forecast/ForecastApi';\n\nclass App extends React.Component {\n  render()\n  {\n    return (\n    <div className=\"App\">\n    <Forecast></Forecast>\n    </div>\n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}